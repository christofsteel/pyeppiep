#!/usr/bin/env python2

import os
import sys
import twitter
import ConfigParser
import oauth2 as oauth
import urlparse
import re
import time

def printstatus(s):
    ids_string="\033[1;30m"+str(s.id)+"\033[m"
    time_string="\033[1m"+time.strftime("%x - %X", time.localtime(s.GetCreatedAtInSeconds()))+"\033[m"
    try:
        user_string="\033[1;32m"+s.user.screen_name+"\033[m"
    except:
        user_string="\033[1;32m"+s.sender_screen_name+"\033[m"
    text_string_=re.sub('@[A-Za-z0-9_]*', lambda mo: '\033[1;34m'+mo.group(0)+'\033[m', s.text)
    text_string=re.sub('#[A-Za-z0-9_]*', lambda mo: '\033[1;31m'+mo.group(0)+'\033[m', text_string_)
    print ids_string+" "+time_string+"\n\t"+user_string+": "+text_string+"\n"
    
def header(caption):
    return "---\033[1m["+caption+"]\033[m"+("-"*(75-len(caption)))

def printstatuses(statuses, caption):
    print header(caption)
    for s in statuses:
        printstatus(s)

def post(api, message, status_id=None):
    if status_id != None:
        message = "@"+api.GetStatus(status_id).user.screen_name+": "+message
    api.PostUpdate(message, status_id)
    
def fetch(api, config, argv, showstatuses=True):
    count = None
    since_id = 0
    statuses = []
    dmessages = []
    if len(argv) > 2:
        count = argv[2]
    else:
	try:
            since_id = config.get('pyeppiep', 'since_id')
            msince_id = config.get('pyeppiep', 'msince_id')
            dsince_id = config.get('pyeppiep', 'msince_id')
        except:
            since_id = None
            msince_id = None
            dsince_id = None
    if len(argv) > 3 and argv[2] == "id":
        status_id = argv[3]
      	status = api.GetStatus(status_id)
        if showstatuses:
            printstatus(status)
    else:
        statuses = api.GetFriendsTimeline(since_id=since_id, count=count)[::-1]
        if showstatuses and len(statuses) > 0:
            printstatuses(statuses, "Tweets")
            config.set('pyeppiep', 'since_id', statuses[len(statuses)-1].id)
        if count == None and showstatuses:
            mstatuses = api.GetMentions(since_id=msince_id)[::-1]
            if len(mstatuses) > 0:
                printstatuses(mstatuses, "Mentions")
                config.set('pyeppiep', 'msince_id', mstatuses[len(mstatuses)-1].id)
            dmessages = api.GetDirectMessages(since_id=dsince_id)[::-1]
            if len(dmessages) > 0:
                printstatuses(dmessages, "Direct Messages")
                config.set('pyeppiep', 'dsince_id', dmessages[len(dmessages)-1].id)
        return len(statuses)+len(dmessages)

def nr(api, config):
    print fetch(api, config, [], False)

def follow(api, user):
    api.CreateFriendship(user)

def dm(api, user, message):
    api.PostDirectMessage(user, message)

def usage():
    print "pyeppiep"
    print "\tA twitter client in Python"
    print
    print "usage:"
    print "\tpyeppiep"
    print "\t\tFetches latest unread statuses, mentions and direct messages"
    print "\tpyeppiep fetch [id <status_id> | <count>]"
    print "\t\tFetches the status with id <status_id>, or the last <count> statuses you recieved. If neither <count> nor id <status_id> is given, then it fetches the last unread statuses, mentions and direct messages"
    print "\tpyeppiep nr"
    print "\t\tReturns the number of unread messages (statuses and direct messages)"
    print "\tpyeppiep reply <status_id> <message>"
    print "\t\tReply to status with <status_id>. The name of the user is automaticly inserted infront of the tweet"
    print "\tpyeppiep post <message>"
    print "\t\tPost <message>"
    print "\tpyeppiep follow <username>"
    print "\t\tFollow <username>"
    print "\tpyeppiep dm <username> <message>"
    print "\t\tSend a direct message to user <username>"

def interpret(api, config, argv):
    if len(argv) == 1 or argv[1] == "fetch":
        fetch(api, config, argv)
    elif argv[1] == "nr":
        nr(api, config)
    elif argv[1] == "reply" and len(argv) > 2:
        post(api, argv[3], argv[2])
    elif argv[1] == "post" and len(argv) > 2:
        post(api, argv[2])
    elif argv[1] == "follow" and len(argv) > 2:
        follow(api, argv[2])
    elif argv[1] == "dm" and len(argv) > 3:
        dm(api, argv[2], argv[3])
    else:
        usage();
def main(argv=None):
    if argv is None:
        argv = sys.argv
    argc = len(argv)
    
    consumer_key='JYb65z4fc5XWl90bfYg'
    consumer_secret='63jwb0Ure3lzZGcu5Zk0xFZgZlcZSdhGmpXfIW3M'

    config = ConfigParser.RawConfigParser()

    try:
        config.read(os.path.expanduser("~")+'/.pyeppiep')
	if config.get('pyeppiep', 'oauth_token_secret') == '':
		raise ConfigParser.Error()
	if config.get('pyeppiep', 'oauth_token') == '':
		raise ConfigParser.Error()
	if config.get('pyeppiep', 'screen_name') == '':
		raise ConfigParser.Error()
	if config.get('pyeppiep', 'user_id') == '':
		raise ConfigParser.Error()
    except ConfigParser.Error:
        config = ConfigParser.RawConfigParser()
        config.add_section('pyeppiep')
        request_token_url = 'http://twitter.com/oauth/request_token'
        access_token_url = 'http://twitter.com/oauth/access_token'
        authorize_url = 'http://twitter.com/oauth/authorize'

        consumer = oauth.Consumer(consumer_key, consumer_secret)
        client = oauth.Client(consumer)
        resp, content = client.request(request_token_url, "GET")
        if resp['status'] != '200':
            print "Invalid response "+resp['status']
            sys.exit(1)

        request_token = dict(urlparse.parse_qsl(content))
        print "Go to the following link in your browser:"
        print "%s?oauth_token=%s" % (authorize_url, request_token['oauth_token'])
        print
        oauth_verifier = raw_input('What is the PIN? ')

        token = oauth.Token(request_token['oauth_token'],
            request_token['oauth_token_secret'])
        token.set_verifier(oauth_verifier)
        client = oauth.Client(consumer, token)

        resp, content = client.request(access_token_url, "POST")
        access_token = dict(urlparse.parse_qsl(content))

        config.set('pyeppiep', 'user_id', access_token['user_id'])
        config.set('pyeppiep', 'screen_name', access_token['screen_name'])
        config.set('pyeppiep', 'oauth_token', access_token['oauth_token'])
        config.set('pyeppiep', 'oauth_token_secret', access_token['oauth_token_secret'])

    api = twitter.Api(consumer_key=consumer_key, consumer_secret=consumer_secret, access_token_key=config.get('pyeppiep', 'oauth_token'), access_token_secret=config.get('pyeppiep', 'oauth_token_secret'))

    interpret(api, config, argv)
    with open(os.path.expanduser("~")+'/.pyeppiep', 'w') as configfile:
        config.write(configfile)


if __name__ == "__main__":
    main()
